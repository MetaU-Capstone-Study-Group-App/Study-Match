// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int            @id @default(autoincrement())
  name                  String
  username              String         @unique
  password              String
  profile_picture       Bytes?         
  created_at            DateTime       @default(now())
  preferred_start_time  String?
  preferred_end_time    String?
  school                String?
  address_latitude      Float?
  address_longitude     Float?
  class_standing        String?
  email                 String?
  phone_number          String?
  personality_weight    Float?          @default(0.2)
  location_weight       Float?          @default(0.4)
  goals_weight          Float?          @default(0.2)
  school_weight         Float?          @default(0.1)
  class_standing_weight Float?          @default(0.1)
  personality_quiz      Quiz?
  busy_times            BusyTime[] 
  user_classes          UserClass[]
  groups                UserExistingGroup[]
  goals                 UserGoal[]
  user_favorites        UserFavorite[]

  @@map("users")
}

model Quiz {
  id               Int              @id 
  quiz_responses   QuizResponse[]
  user             User             @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: NoAction) 
  
  @@map("quizzes")
}

model QuizResponse {
  id               Int              @id @default(autoincrement())
  user_id          Int
  question_id      Int
  question         String
  question_trait   String
  response         Int
  quiz             Quiz             @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("quizResponses")
}

model BusyTime {
  id               Int              @id @default(autoincrement())
  user_id          Int
  day_of_week      Int
  start_time       String         
  end_time         String
  class_name       String         
  user             User             @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("busyTime")
}

model Class {
  id               Int              @id @default(autoincrement())
  name             String
  user_classes     UserClass[]

  @@map("classes")
}

model UserClass {
  id               Int              @id @default(autoincrement())
  user_id          Int               
  class_id         Int
  user             User             @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  class            Class            @relation(fields: [class_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("userClasses")
}

model ExistingGroup {
  id                    Int              @id @default(autoincrement())
  class_id              Int
  day_of_week           Int
  start_time            String
  end_time              String
  study_goals           String?
  user_existing_groups  UserExistingGroup[] 

  @@map("existingGroups")
}

model UserExistingGroup {
  id                  Int              @id @default(autoincrement())
  user_id             Int
  existing_group_id   Int
  status              String           @default("available")
  recommended         Boolean          @default(false)
  user                User             @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  existing_group      ExistingGroup    @relation(fields: [existing_group_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("userExistingGroups")
}

model GoalOption {
  id                  Int              @id @default(autoincrement())
  goal                String
  user_goals          UserGoal[]

  @@map("goalOptions")
}

model UserGoal {
  id                  Int              @id @default(autoincrement())
  user_id             Int              
  goal_id             Int
  user                User             @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  goal_option         GoalOption       @relation(fields: [goal_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  
  @@map("userGoals")
}

model UserFavorite {
  id                  Int              @id @default(autoincrement())
  logged_in_user      Int 
  favorite_user       Int
  current_user        User             @relation(fields: [logged_in_user], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("userFavorites")
}
